{"version":3,"sources":["views/Collectibles/components/InfoRow.tsx","views/Collectibles/components/TransferNftModal.tsx","views/Collectibles/components/ClaimNftModal.tsx","views/Collectibles/components/NftCard/Preview.tsx","views/Collectibles/components/NftCard/index.tsx","views/Collectibles/components/NftGrid.tsx","views/Collectibles/components/NftList.tsx","views/Collectibles/index.tsx","state/collectibles/hooks.ts"],"names":["InfoRow","styled","div","Value","Text","ModalContent","Actions","Label","label","theme","colors","text","TransferNftModal","nft","tokenIds","onSuccess","onDismiss","useState","isLoading","setIsLoading","value","setValue","error","setError","t","useTranslation","account","useWeb3React","contract","useERC721","getBunnyNftAddress","toastSuccess","useToast","callWithGasPrice","useCallWithGasPrice","handleConfirm","a","ethers","utils","isAddress","tx","wait","receipt","status","Toast","txHash","transactionHash","console","title","color","mb","nftName","name","htmlFor","id","type","placeholder","onChange","evt","inputValue","target","isWarning","disabled","width","variant","onClick","ClaimNftModal","onClaim","isConfirming","setIsConfirming","toastError","alignItems","justifyContent","bold","endIcon","spin","Container","cardBorder","StyledImage","img","StyledVideo","video","Preview","isOwned","images","previewImageSrc","lg","videoComponent","autoPlay","controls","loop","muted","poster","src","webm","mp4","href","ipfs","rel","previewImage","alt","Header","DetailsButton","Button","attrs","InfoBlock","NftCard","canClaim","refresh","isOpen","setIsOpen","profile","useProfile","identifier","description","walletOwnsNft","length","Icon","ChevronUpIcon","ChevronDownIcon","handleClick","handleSuccess","useModal","onPresentTransferModal","onPresentClaimModal","isActive","outline","mt","p","as","style","textAlign","NftGrid","mediaQueries","sm","md","nftComponents","NftList","useGetCollectibles","dispatch","useAppDispatch","handleRefresh","useCallback","fetchWalletNfts","useEffect","nfts","pancake","map","Card","StyledHero","textSubtle","Collectibles","Page","scale","useSelector","state","collectibles","isInitialized","data","identifiers","Object","keys","nftsInWallet","Nfts","filter","includes"],"mappings":"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","file":"static/js/25.6cacc36d.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nconst InfoRow = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n\r\nexport default InfoRow\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { ethers } from 'ethers'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Button, Input, Modal, Text } from '@pancakeswap/uikit'\r\nimport { getBunnyNftAddress } from 'utils/collectibles'\r\nimport { Nft } from 'config/constants/nfts/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { useERC721 } from 'hooks/useContract'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport InfoRow from './InfoRow'\r\n\r\ninterface TransferNftModalProps {\r\n  nft: Nft\r\n  tokenIds: number[]\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst Label = styled.label`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: block;\r\n  margin-bottom: 8px;\r\n  margin-top: 24px;\r\n`\r\n\r\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [value, setValue] = useState('')\r\n  const [error, setError] = useState(null)\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const contract = useERC721(getBunnyNftAddress())\r\n  const { toastSuccess } = useToast()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      const isValidAddress = ethers.utils.isAddress(value)\r\n\r\n      if (!isValidAddress) {\r\n        setError(t('Please enter a valid wallet address'))\r\n      } else {\r\n        const tx = await callWithGasPrice(contract, 'transferFrom', [account, value, tokenIds[0]])\r\n        setIsLoading(true)\r\n        // TODO: Refactor to try/catch pattern so error state is properly handled\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          onDismiss()\r\n          onSuccess()\r\n          toastSuccess(t('NFT successfully transferred!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n        } else {\r\n          setError(t('Unable to transfer NFT'))\r\n          setIsLoading(false)\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error('Unable to transfer NFT:', err)\r\n    }\r\n  }\r\n\r\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value: inputValue } = evt.target\r\n    setValue(inputValue)\r\n  }\r\n\r\n  return (\r\n    <Modal title={t('Transfer NFT')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{t('Transferring')}:</Text>\r\n          <Value>{t('1x %nftName% NFT', { nftName: nft.name })}</Value>\r\n        </InfoRow>\r\n        <Label htmlFor=\"transferAddress\">{t('Receiving address')}:</Label>\r\n        <Input\r\n          id=\"transferAddress\"\r\n          name=\"address\"\r\n          type=\"text\"\r\n          placeholder={t('Paste address')}\r\n          value={value}\r\n          onChange={handleChange}\r\n          isWarning={error}\r\n          disabled={isLoading}\r\n        />\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!account || isLoading || !value}>\r\n          {t('Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default TransferNftModal\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { ethers } from 'ethers'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Button, InjectedModalProps, Modal, Text, Flex, AutoRenewIcon } from '@pancakeswap/uikit'\r\nimport { Nft } from 'config/constants/nfts/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\n\r\ninterface ClaimNftModalProps extends InjectedModalProps {\r\n  nft: Nft\r\n  onSuccess: () => void\r\n  onClaim: () => Promise<ethers.providers.TransactionResponse>\r\n}\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onClaim, onDismiss }) => {\r\n  const [isConfirming, setIsConfirming] = useState(false)\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  const handleConfirm = async () => {\r\n    setIsConfirming(true)\r\n    try {\r\n      const tx = await onClaim()\r\n      const receipt = await tx.wait()\r\n      if (receipt.status) {\r\n        toastSuccess(t('Successfully claimed!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n        onDismiss()\r\n        onSuccess()\r\n      }\r\n    } catch {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setIsConfirming(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal title={t('Claim Collectible')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        <Flex alignItems=\"center\" mb=\"8px\" justifyContent=\"space-between\">\r\n          <Text>{t('You will receive')}:</Text>\r\n          <Text bold>{t('1x %nftName% Collectible', { nftName: nft.name })}</Text>\r\n        </Flex>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          onClick={handleConfirm}\r\n          disabled={!account}\r\n          isLoading={isConfirming}\r\n          endIcon={isConfirming ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\r\n        >\r\n          {t('Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ClaimNftModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Nft } from 'config/constants/nfts/types'\r\n\r\ninterface PreviewProps {\r\n  nft: Nft\r\n  isOwned?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.cardBorder};\r\n  position: relative;\r\n  width: 100%;\r\n  overflow: hidden;\r\n  padding-bottom: 100%;\r\n`\r\n\r\nconst StyledImage = styled.img`\r\n  position: absolute;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  transition: opacity 1s linear;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  border-radius: 24px 24px 0 0;\r\n`\r\n\r\nconst StyledVideo = styled.video`\r\n  height: 100%;\r\n  width: 100%;\r\n`\r\n\r\nconst Preview: React.FC<PreviewProps> = ({ nft, isOwned = false }) => {\r\n  const { images, name, video } = nft\r\n  const previewImageSrc = `/images/nfts/${images.lg}`\r\n\r\n  if (video) {\r\n    const videoComponent = (\r\n      <StyledVideo autoPlay controls={false} loop muted poster={previewImageSrc}>\r\n        <source src={video.webm} type=\"video/webm\" />\r\n        <source src={video.mp4} type=\"video/mp4\" />\r\n      </StyledVideo>\r\n    )\r\n\r\n    return isOwned ? (\r\n      <a href={images.ipfs} target=\"_blank\" rel=\"noreferrer noopener\">\r\n        {videoComponent}\r\n      </a>\r\n    ) : (\r\n      videoComponent\r\n    )\r\n  }\r\n\r\n  const previewImage = <StyledImage src={previewImageSrc} alt={name} />\r\n\r\n  return (\r\n    <Container>\r\n      {isOwned ? (\r\n        <a href={images.ipfs} target=\"_blank\" rel=\"noreferrer noopener\">\r\n          {previewImage}\r\n        </a>\r\n      ) : (\r\n        previewImage\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Preview\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { ethers } from 'ethers'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Heading,\r\n  Tag,\r\n  Button,\r\n  ChevronUpIcon,\r\n  ChevronDownIcon,\r\n  Text,\r\n  CardFooter,\r\n  useModal,\r\n} from '@pancakeswap/uikit'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Nft } from 'config/constants/nfts/types'\r\nimport InfoRow from '../InfoRow'\r\nimport TransferNftModal from '../TransferNftModal'\r\nimport ClaimNftModal from '../ClaimNftModal'\r\nimport Preview from './Preview'\r\n\r\nexport interface NftCardProps {\r\n  nft: Nft\r\n  canClaim?: boolean\r\n  tokenIds?: number[]\r\n  onClaim?: () => Promise<ethers.providers.TransactionResponse>\r\n  refresh: () => void\r\n}\r\n\r\nconst Header = styled(InfoRow)`\r\n  min-height: 28px;\r\n`\r\n\r\nconst DetailsButton = styled(Button).attrs({ variant: 'text' })`\r\n  height: auto;\r\n  padding: 16px 24px;\r\n\r\n  &:hover:not(:disabled):not(:active) {\r\n    background-color: transparent;\r\n  }\r\n\r\n  &:focus:not(:active) {\r\n    box-shadow: none;\r\n  }\r\n`\r\n\r\nconst InfoBlock = styled.div`\r\n  padding: 24px;\r\n`\r\n\r\nconst NftCard: React.FC<NftCardProps> = ({ nft, canClaim = false, tokenIds = [], onClaim, refresh }) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const { t } = useTranslation()\r\n  const { profile } = useProfile()\r\n  const { identifier, name, description } = nft\r\n  const walletOwnsNft = tokenIds.length > 0\r\n  const Icon = isOpen ? ChevronUpIcon : ChevronDownIcon\r\n\r\n  const handleClick = async () => {\r\n    setIsOpen(!isOpen)\r\n  }\r\n\r\n  const handleSuccess = () => {\r\n    refresh()\r\n  }\r\n\r\n  const [onPresentTransferModal] = useModal(\r\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\r\n  )\r\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} onClaim={onClaim} />)\r\n\r\n  return (\r\n    <Card isActive={walletOwnsNft}>\r\n      <Preview nft={nft} isOwned={walletOwnsNft} />\r\n      <CardBody>\r\n        <Header>\r\n          <Heading>{name}</Heading>\r\n          {walletOwnsNft && (\r\n            <Tag outline variant=\"secondary\">\r\n              {t('In Wallet')}\r\n            </Tag>\r\n          )}\r\n          {profile?.nft?.identifier === identifier && (\r\n            <Tag outline variant=\"success\">\r\n              {t('Profile Pic')}\r\n            </Tag>\r\n          )}\r\n        </Header>\r\n        {canClaim && (\r\n          <Button width=\"100%\" mt=\"24px\" onClick={onPresentClaimModal}>\r\n            {t('Claim this NFT')}\r\n          </Button>\r\n        )}\r\n        {walletOwnsNft && (\r\n          <Button width=\"100%\" variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\r\n            {t('Transfer')}\r\n          </Button>\r\n        )}\r\n      </CardBody>\r\n      <CardFooter p=\"0\">\r\n        <DetailsButton width=\"100%\" endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\r\n          {t('Details')}\r\n        </DetailsButton>\r\n        {isOpen && (\r\n          <InfoBlock>\r\n            <Text as=\"p\" color=\"textSubtle\" style={{ textAlign: 'center' }}>\r\n              {t(description)}\r\n            </Text>\r\n          </InfoBlock>\r\n        )}\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NftCard\r\n","import styled from 'styled-components'\r\n\r\nconst NftGrid = styled.div`\r\n  display: grid;\r\n  grid-gap: 32px;\r\n  grid-template-columns: 1fr;\r\n  padding-bottom: 24px;\r\n  padding-top: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    grid-template-columns: repeat(3, 1fr);\r\n  }\r\n`\r\n\r\nexport default NftGrid\r\n","import React, { useEffect, useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport nfts from 'config/constants/nfts'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchWalletNfts } from 'state/collectibles'\r\nimport { useGetCollectibles } from 'state/collectibles/hooks'\r\nimport NftCard from './NftCard'\r\nimport NftGrid from './NftGrid'\r\n\r\n/**\r\n * A map of bunnyIds to special campaigns (NFT distribution)\r\n * Each NftCard is responsible for checking it's own claim status\r\n *\r\n */\r\nconst nftComponents = {}\r\n\r\nconst NftList = () => {\r\n  const { tokenIds } = useGetCollectibles()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleRefresh = useCallback(() => {\r\n    if (account) {\r\n      dispatch(fetchWalletNfts(account))\r\n    }\r\n  }, [dispatch, account])\r\n\r\n  useEffect(() => {\r\n    handleRefresh()\r\n  }, [account, handleRefresh])\r\n\r\n  return (\r\n    <NftGrid>\r\n      {nfts.pancake.map((nft) => {\r\n        const Card = nftComponents[nft.identifier] || NftCard\r\n\r\n        return (\r\n          <div key={nft.name} id={`nft-${nft.name}`}>\r\n            <Card nft={nft} tokenIds={tokenIds[nft.identifier]} refresh={handleRefresh} />\r\n          </div>\r\n        )\r\n      })}\r\n    </NftGrid>\r\n  )\r\n}\r\n\r\nexport default NftList\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Page from 'components/Layout/Page'\r\nimport NftList from './components/NftList'\r\n\r\nconst StyledHero = styled.div`\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.textSubtle};\r\n  margin-bottom: 24px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst Collectibles = () => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Page>\r\n      <StyledHero>\r\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\">\r\n          {t('TVL')}\r\n        </Heading>\r\n      </StyledHero>\r\n      <NftList />\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Collectibles\r\n","import { useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from 'state'\r\nimport Nfts from 'config/constants/nfts'\r\nimport { State } from '../types'\r\nimport { fetchWalletNfts } from './index'\r\n\r\nexport const useGetCollectibles = () => {\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const { isInitialized, isLoading, data } = useSelector((state: State) => state.collectibles)\r\n\r\n  const identifiers = Object.keys(data)\r\n\r\n  useEffect(() => {\r\n    // Fetch nfts only if we have not done so already\r\n    if (!isInitialized && account) {\r\n      dispatch(fetchWalletNfts(account))\r\n    }\r\n  }, [isInitialized, account, dispatch])\r\n\r\n  return {\r\n    isInitialized,\r\n    isLoading,\r\n    tokenIds: data,\r\n    nftsInWallet: Nfts.pancake.filter((nft) => identifiers.includes(nft.identifier)),\r\n  }\r\n}\r\n"],"sourceRoot":""}