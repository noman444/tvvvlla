{"version":3,"sources":["state/burn/hooks.ts","views/RemoveLiquidity/index.tsx","hooks/useDebouncedChangeHandler.ts","components/Links/index.tsx"],"names":["useBurnState","useSelector","state","burn","BorderCard","styled","div","theme","colors","cardBorder","RemoveLiquidity","history","match","params","currencyIdA","currencyIdB","currencyA","useCurrency","undefined","currencyB","useActiveWeb3React","account","chainId","library","useMemo","wrappedCurrency","tokenA","tokenB","t","useTranslation","gasPrice","useGasPrice","independentField","typedValue","usePair","pair","relevantTokenBalances","useTokenBalances","liquidityToken","userLiquidity","address","tokens","Field","CURRENCY_A","CURRENCY_B","LIQUIDITY","totalSupply","useTotalSupply","liquidityValueA","JSBI","greaterThanOrEqual","raw","TokenAmount","getLiquidityValue","liquidityValueB","liquidityValues","percentToRemove","Percent","LIQUIDITY_PERCENT","independentAmount","tryParseAmount","greaterThan","liquidityValue","error","parsedAmounts","token","multiply","quotient","useDerivedBurnInfo","_onUserInput","dispatch","useDispatch","onUserInput","useCallback","field","typeInput","useBurnActionHandlers","isValid","useState","showDetailed","setShowDetailed","attemptingTxn","setAttemptingTxn","txHash","setTxHash","deadline","useTransactionDeadline","useUserSlippageTolerance","allowedSlippage","formattedAmounts","equalTo","lessThan","toFixed","toSignificant","atMaxAmount","pairContract","usePairContract","signatureData","setSignatureData","useApproveCallback","ROUTER_ADDRESS","approval","approveCallback","a","Error","liquidityAmount","nonces","nonce","EIP712Domain","name","type","domain","version","verifyingContract","Permit","message","owner","spender","value","toString","toHexString","toNumber","data","JSON","stringify","types","primaryType","send","then","splitSignature","signature","v","r","s","err","code","onLiquidityInput","onCurrencyAInput","onCurrencyBInput","addTransaction","useTransactionAdder","onRemove","currencyAmountA","currencyAmountB","router","getRouterContract","calculateSlippageAmount","amountsMin","currencyBIsETH","ETHER","oneCurrencyIsETH","ApprovalState","APPROVED","methodNames","args","Promise","all","map","methodName","estimateGas","calculateGasMargin","console","safeGasEstimates","indexOfSuccessfulEstimation","findIndex","safeGasEstimate","BigNumber","isBigNumber","gasLimit","response","summary","symbol","hash","modalHeader","gap","Row","align","fontSize","currency","size","ml","width","small","textAlign","pt","slippage","modalBottom","assetA","assetB","currency0","currency1","margin","priceOf","disabled","onClick","pendingText","amountA","symbolA","amountB","symbolB","liquidityPercentChangeCallback","oneCurrencyIsWETH","Boolean","currencyEquals","WETH","handleSelectCurrencyA","currencyId","push","handleSelectCurrencyB","handleDismissConfirmation","onChange","debouncedMs","inner","setInner","timer","useRef","onChangeInner","newValue","current","clearTimeout","setTimeout","useEffect","useDebouncedChangeHandler","Number","parseInt","innerLiquidityPercentage","setInnerLiquidityPercentage","useModal","TransactionConfirmationModal","title","customOnDismiss","content","topContent","bottomContent","onPresentRemoveLiquidity","Page","App","backTo","subtitle","noConfig","variant","scale","bold","mb","style","lineHeight","min","max","onValueChanged","Math","ceil","flexWrap","justifyContent","Column","color","my","textTransform","id","to","CurrencyInputPanel","onMax","showMaxButton","disableCurrencySelect","onCurrencySelect","hideBalance","label","marginTop","position","mt","NOT_APPROVED","mr","PENDING","Dots","ConnectWalletButton","minWidth","maxWidth","showUnwrapped","StyledInternalLink","Link","primary"],"mappings":"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","file":"static/js/23.1b041c33.chunk.js","sourcesContent":["import { Currency, CurrencyAmount, JSBI, Pair, Percent, TokenAmount } from '@pancakeswap/sdk'\r\nimport { useCallback } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\r\nimport { usePair } from 'hooks/usePairs'\r\nimport useTotalSupply from 'hooks/useTotalSupply'\r\n\r\nimport { AppDispatch, AppState } from '../index'\r\nimport { tryParseAmount } from '../swap/hooks'\r\nimport { useTokenBalances } from '../wallet/hooks'\r\nimport { Field, typeInput } from './actions'\r\n\r\nexport function useBurnState(): AppState['burn'] {\r\n  return useSelector<AppState, AppState['burn']>((state) => state.burn)\r\n}\r\n\r\nexport function useDerivedBurnInfo(\r\n  currencyA: Currency | undefined,\r\n  currencyB: Currency | undefined,\r\n): {\r\n  pair?: Pair | null\r\n  parsedAmounts: {\r\n    [Field.LIQUIDITY_PERCENT]: Percent\r\n    [Field.LIQUIDITY]?: TokenAmount\r\n    [Field.CURRENCY_A]?: CurrencyAmount\r\n    [Field.CURRENCY_B]?: CurrencyAmount\r\n  }\r\n  error?: string\r\n} {\r\n  const { account, chainId } = useActiveWeb3React()\r\n\r\n  const { independentField, typedValue } = useBurnState()\r\n\r\n  // pair + totalsupply\r\n  const [, pair] = usePair(currencyA, currencyB)\r\n\r\n  // balances\r\n  const relevantTokenBalances = useTokenBalances(account ?? undefined, [pair?.liquidityToken])\r\n  const userLiquidity: undefined | TokenAmount = relevantTokenBalances?.[pair?.liquidityToken?.address ?? '']\r\n\r\n  const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\r\n  const tokens = {\r\n    [Field.CURRENCY_A]: tokenA,\r\n    [Field.CURRENCY_B]: tokenB,\r\n    [Field.LIQUIDITY]: pair?.liquidityToken,\r\n  }\r\n\r\n  // liquidity values\r\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\r\n  const liquidityValueA =\r\n    pair &&\r\n    totalSupply &&\r\n    userLiquidity &&\r\n    tokenA &&\r\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\r\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\r\n      ? new TokenAmount(tokenA, pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).raw)\r\n      : undefined\r\n  const liquidityValueB =\r\n    pair &&\r\n    totalSupply &&\r\n    userLiquidity &&\r\n    tokenB &&\r\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\r\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\r\n      ? new TokenAmount(tokenB, pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).raw)\r\n      : undefined\r\n  const liquidityValues: { [Field.CURRENCY_A]?: TokenAmount; [Field.CURRENCY_B]?: TokenAmount } = {\r\n    [Field.CURRENCY_A]: liquidityValueA,\r\n    [Field.CURRENCY_B]: liquidityValueB,\r\n  }\r\n\r\n  let percentToRemove: Percent = new Percent('0', '100')\r\n  // user specified a %\r\n  if (independentField === Field.LIQUIDITY_PERCENT) {\r\n    percentToRemove = new Percent(typedValue, '100')\r\n  }\r\n  // user specified a specific amount of liquidity tokens\r\n  else if (independentField === Field.LIQUIDITY) {\r\n    if (pair?.liquidityToken) {\r\n      const independentAmount = tryParseAmount(typedValue, pair.liquidityToken)\r\n      if (independentAmount && userLiquidity && !independentAmount.greaterThan(userLiquidity)) {\r\n        percentToRemove = new Percent(independentAmount.raw, userLiquidity.raw)\r\n      }\r\n    }\r\n  }\r\n  // user specified a specific amount of token a or b\r\n  else if (tokens[independentField]) {\r\n    const independentAmount = tryParseAmount(typedValue, tokens[independentField])\r\n    const liquidityValue = liquidityValues[independentField]\r\n    if (independentAmount && liquidityValue && !independentAmount.greaterThan(liquidityValue)) {\r\n      percentToRemove = new Percent(independentAmount.raw, liquidityValue.raw)\r\n    }\r\n  }\r\n\r\n  const parsedAmounts: {\r\n    [Field.LIQUIDITY_PERCENT]: Percent\r\n    [Field.LIQUIDITY]?: TokenAmount\r\n    [Field.CURRENCY_A]?: TokenAmount\r\n    [Field.CURRENCY_B]?: TokenAmount\r\n  } = {\r\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\r\n    [Field.LIQUIDITY]:\r\n      userLiquidity && percentToRemove && percentToRemove.greaterThan('0')\r\n        ? new TokenAmount(userLiquidity.token, percentToRemove.multiply(userLiquidity.raw).quotient)\r\n        : undefined,\r\n    [Field.CURRENCY_A]:\r\n      tokenA && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueA\r\n        ? new TokenAmount(tokenA, percentToRemove.multiply(liquidityValueA.raw).quotient)\r\n        : undefined,\r\n    [Field.CURRENCY_B]:\r\n      tokenB && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueB\r\n        ? new TokenAmount(tokenB, percentToRemove.multiply(liquidityValueB.raw).quotient)\r\n        : undefined,\r\n  }\r\n\r\n  let error: string | undefined\r\n  if (!account) {\r\n    error = 'Connect Wallet'\r\n  }\r\n\r\n  if (!parsedAmounts[Field.LIQUIDITY] || !parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\r\n    error = error ?? 'Enter an amount'\r\n  }\r\n\r\n  return { pair, parsedAmounts, error }\r\n}\r\n\r\nexport function useBurnActionHandlers(): {\r\n  onUserInput: (field: Field, typedValue: string) => void\r\n} {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  const onUserInput = useCallback(\r\n    (field: Field, typedValue: string) => {\r\n      dispatch(typeInput({ field, typedValue }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return {\r\n    onUserInput,\r\n  }\r\n}\r\n","import React, { useCallback, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { splitSignature } from '@ethersproject/bytes'\r\nimport { Contract } from '@ethersproject/contracts'\r\nimport { TransactionResponse } from '@ethersproject/providers'\r\nimport { Currency, currencyEquals, ETHER, Percent, WETH } from '@pancakeswap/sdk'\r\nimport { Button, Text, AddIcon, ArrowDownIcon, CardBody, Slider, Box, Flex, useModal } from '@pancakeswap/uikit'\r\nimport { RouteComponentProps } from 'react-router'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { AutoColumn, ColumnCenter } from '../../components/Layout/Column'\r\nimport TransactionConfirmationModal, { ConfirmationModalContent } from '../../components/TransactionConfirmationModal'\r\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\r\nimport { MinimalPositionCard } from '../../components/PositionCard'\r\nimport { AppHeader, AppBody } from '../../components/App'\r\nimport { RowBetween, RowFixed } from '../../components/Layout/Row'\r\nimport ConnectWalletButton from '../../components/ConnectWalletButton'\r\nimport { LightGreyCard } from '../../components/Card'\r\n\r\nimport { CurrencyLogo, DoubleCurrencyLogo } from '../../components/Logo'\r\nimport { ROUTER_ADDRESS } from '../../config/constants'\r\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React'\r\nimport { useCurrency } from '../../hooks/Tokens'\r\nimport { usePairContract } from '../../hooks/useContract'\r\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline'\r\n\r\nimport { useTransactionAdder } from '../../state/transactions/hooks'\r\nimport StyledInternalLink from '../../components/Links'\r\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from '../../utils'\r\nimport { currencyId } from '../../utils/currencyId'\r\nimport useDebouncedChangeHandler from '../../hooks/useDebouncedChangeHandler'\r\nimport { wrappedCurrency } from '../../utils/wrappedCurrency'\r\nimport { useApproveCallback, ApprovalState } from '../../hooks/useApproveCallback'\r\nimport Dots from '../../components/Loader/Dots'\r\nimport { useBurnActionHandlers, useDerivedBurnInfo, useBurnState } from '../../state/burn/hooks'\r\n\r\nimport { Field } from '../../state/burn/actions'\r\nimport { useGasPrice, useUserSlippageTolerance } from '../../state/user/hooks'\r\nimport Page from '../Page'\r\n\r\nconst BorderCard = styled.div`\r\n  border: solid 1px ${({ theme }) => theme.colors.cardBorder};\r\n  border-radius: 16px;\r\n  padding: 16px;\r\n`\r\n\r\nexport default function RemoveLiquidity({\r\n  history,\r\n  match: {\r\n    params: { currencyIdA, currencyIdB },\r\n  },\r\n}: RouteComponentProps<{ currencyIdA: string; currencyIdB: string }>) {\r\n  const [currencyA, currencyB] = [useCurrency(currencyIdA) ?? undefined, useCurrency(currencyIdB) ?? undefined]\r\n  const { account, chainId, library } = useActiveWeb3React()\r\n  const [tokenA, tokenB] = useMemo(\r\n    () => [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)],\r\n    [currencyA, currencyB, chainId],\r\n  )\r\n\r\n  const { t } = useTranslation()\r\n  const gasPrice = useGasPrice()\r\n\r\n  // burn state\r\n  const { independentField, typedValue } = useBurnState()\r\n  const { pair, parsedAmounts, error } = useDerivedBurnInfo(currencyA ?? undefined, currencyB ?? undefined)\r\n  const { onUserInput: _onUserInput } = useBurnActionHandlers()\r\n  const isValid = !error\r\n\r\n  // modal and loading\r\n  const [showDetailed, setShowDetailed] = useState<boolean>(false)\r\n  const [attemptingTxn, setAttemptingTxn] = useState(false) // clicked confirm\r\n\r\n  // txn values\r\n  const [txHash, setTxHash] = useState<string>('')\r\n  const deadline = useTransactionDeadline()\r\n  const [allowedSlippage] = useUserSlippageTolerance()\r\n\r\n  const formattedAmounts = {\r\n    [Field.LIQUIDITY_PERCENT]: parsedAmounts[Field.LIQUIDITY_PERCENT].equalTo('0')\r\n      ? '0'\r\n      : parsedAmounts[Field.LIQUIDITY_PERCENT].lessThan(new Percent('1', '100'))\r\n      ? '<1'\r\n      : parsedAmounts[Field.LIQUIDITY_PERCENT].toFixed(0),\r\n    [Field.LIQUIDITY]:\r\n      independentField === Field.LIQUIDITY ? typedValue : parsedAmounts[Field.LIQUIDITY]?.toSignificant(6) ?? '',\r\n    [Field.CURRENCY_A]:\r\n      independentField === Field.CURRENCY_A ? typedValue : parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\r\n    [Field.CURRENCY_B]:\r\n      independentField === Field.CURRENCY_B ? typedValue : parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\r\n  }\r\n\r\n  const atMaxAmount = parsedAmounts[Field.LIQUIDITY_PERCENT]?.equalTo(new Percent('1'))\r\n\r\n  // pair contract\r\n  const pairContract: Contract | null = usePairContract(pair?.liquidityToken?.address)\r\n\r\n  // allowance handling\r\n  const [signatureData, setSignatureData] = useState<{ v: number; r: string; s: string; deadline: number } | null>(null)\r\n  const [approval, approveCallback] = useApproveCallback(parsedAmounts[Field.LIQUIDITY], ROUTER_ADDRESS)\r\n\r\n  async function onAttemptToApprove() {\r\n    if (!pairContract || !pair || !library || !deadline) throw new Error('missing dependencies')\r\n    const liquidityAmount = parsedAmounts[Field.LIQUIDITY]\r\n    if (!liquidityAmount) throw new Error('missing liquidity amount')\r\n\r\n    // try to gather a signature for permission\r\n    const nonce = await pairContract.nonces(account)\r\n\r\n    const EIP712Domain = [\r\n      { name: 'name', type: 'string' },\r\n      { name: 'version', type: 'string' },\r\n      { name: 'chainId', type: 'uint256' },\r\n      { name: 'verifyingContract', type: 'address' },\r\n    ]\r\n    const domain = {\r\n      name: 'Pancake LPs',\r\n      version: '1',\r\n      chainId,\r\n      verifyingContract: pair.liquidityToken.address,\r\n    }\r\n    const Permit = [\r\n      { name: 'owner', type: 'address' },\r\n      { name: 'spender', type: 'address' },\r\n      { name: 'value', type: 'uint256' },\r\n      { name: 'nonce', type: 'uint256' },\r\n      { name: 'deadline', type: 'uint256' },\r\n    ]\r\n    const message = {\r\n      owner: account,\r\n      spender: ROUTER_ADDRESS,\r\n      value: liquidityAmount.raw.toString(),\r\n      nonce: nonce.toHexString(),\r\n      deadline: deadline.toNumber(),\r\n    }\r\n    const data = JSON.stringify({\r\n      types: {\r\n        EIP712Domain,\r\n        Permit,\r\n      },\r\n      domain,\r\n      primaryType: 'Permit',\r\n      message,\r\n    })\r\n\r\n    library\r\n      .send('eth_signTypedData_v4', [account, data])\r\n      .then(splitSignature)\r\n      .then((signature) => {\r\n        setSignatureData({\r\n          v: signature.v,\r\n          r: signature.r,\r\n          s: signature.s,\r\n          deadline: deadline.toNumber(),\r\n        })\r\n      })\r\n      .catch((err) => {\r\n        // for all errors other than 4001 (EIP-1193 user rejected request), fall back to manual approve\r\n        if (err?.code !== 4001) {\r\n          approveCallback()\r\n        }\r\n      })\r\n  }\r\n\r\n  // wrapped onUserInput to clear signatures\r\n  const onUserInput = useCallback(\r\n    (field: Field, value: string) => {\r\n      setSignatureData(null)\r\n      return _onUserInput(field, value)\r\n    },\r\n    [_onUserInput],\r\n  )\r\n\r\n  const onLiquidityInput = useCallback((value: string): void => onUserInput(Field.LIQUIDITY, value), [onUserInput])\r\n  const onCurrencyAInput = useCallback((value: string): void => onUserInput(Field.CURRENCY_A, value), [onUserInput])\r\n  const onCurrencyBInput = useCallback((value: string): void => onUserInput(Field.CURRENCY_B, value), [onUserInput])\r\n\r\n  // tx sending\r\n  const addTransaction = useTransactionAdder()\r\n  async function onRemove() {\r\n    if (!chainId || !library || !account || !deadline) throw new Error('missing dependencies')\r\n    const { [Field.CURRENCY_A]: currencyAmountA, [Field.CURRENCY_B]: currencyAmountB } = parsedAmounts\r\n    if (!currencyAmountA || !currencyAmountB) {\r\n      throw new Error('missing currency amounts')\r\n    }\r\n    const router = getRouterContract(chainId, library, account)\r\n\r\n    const amountsMin = {\r\n      [Field.CURRENCY_A]: calculateSlippageAmount(currencyAmountA, allowedSlippage)[0],\r\n      [Field.CURRENCY_B]: calculateSlippageAmount(currencyAmountB, allowedSlippage)[0],\r\n    }\r\n\r\n    if (!currencyA || !currencyB) throw new Error('missing tokens')\r\n    const liquidityAmount = parsedAmounts[Field.LIQUIDITY]\r\n    if (!liquidityAmount) throw new Error('missing liquidity amount')\r\n\r\n    const currencyBIsETH = currencyB === ETHER\r\n    const oneCurrencyIsETH = currencyA === ETHER || currencyBIsETH\r\n\r\n    if (!tokenA || !tokenB) throw new Error('could not wrap')\r\n\r\n    let methodNames: string[]\r\n    let args: Array<string | string[] | number | boolean>\r\n    // we have approval, use normal remove liquidity\r\n    if (approval === ApprovalState.APPROVED) {\r\n      // removeLiquidityETH\r\n      if (oneCurrencyIsETH) {\r\n        methodNames = ['removeLiquidityETH', 'removeLiquidityETHSupportingFeeOnTransferTokens']\r\n        args = [\r\n          currencyBIsETH ? tokenA.address : tokenB.address,\r\n          liquidityAmount.raw.toString(),\r\n          amountsMin[currencyBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(),\r\n          amountsMin[currencyBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(),\r\n          account,\r\n          deadline.toHexString(),\r\n        ]\r\n      }\r\n      // removeLiquidity\r\n      else {\r\n        methodNames = ['removeLiquidity']\r\n        args = [\r\n          tokenA.address,\r\n          tokenB.address,\r\n          liquidityAmount.raw.toString(),\r\n          amountsMin[Field.CURRENCY_A].toString(),\r\n          amountsMin[Field.CURRENCY_B].toString(),\r\n          account,\r\n          deadline.toHexString(),\r\n        ]\r\n      }\r\n    }\r\n    // we have a signature, use permit versions of remove liquidity\r\n    else if (signatureData !== null) {\r\n      // removeLiquidityETHWithPermit\r\n      if (oneCurrencyIsETH) {\r\n        methodNames = ['removeLiquidityETHWithPermit', 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens']\r\n        args = [\r\n          currencyBIsETH ? tokenA.address : tokenB.address,\r\n          liquidityAmount.raw.toString(),\r\n          amountsMin[currencyBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(),\r\n          amountsMin[currencyBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(),\r\n          account,\r\n          signatureData.deadline,\r\n          false,\r\n          signatureData.v,\r\n          signatureData.r,\r\n          signatureData.s,\r\n        ]\r\n      }\r\n      // removeLiquidityETHWithPermit\r\n      else {\r\n        methodNames = ['removeLiquidityWithPermit']\r\n        args = [\r\n          tokenA.address,\r\n          tokenB.address,\r\n          liquidityAmount.raw.toString(),\r\n          amountsMin[Field.CURRENCY_A].toString(),\r\n          amountsMin[Field.CURRENCY_B].toString(),\r\n          account,\r\n          signatureData.deadline,\r\n          false,\r\n          signatureData.v,\r\n          signatureData.r,\r\n          signatureData.s,\r\n        ]\r\n      }\r\n    } else {\r\n      throw new Error('Attempting to confirm without approval or a signature. Please contact support.')\r\n    }\r\n\r\n    const safeGasEstimates: (BigNumber | undefined)[] = await Promise.all(\r\n      methodNames.map((methodName) =>\r\n        router.estimateGas[methodName](...args)\r\n          .then(calculateGasMargin)\r\n          .catch((err) => {\r\n            console.error(`estimateGas failed`, methodName, args, err)\r\n            return undefined\r\n          }),\r\n      ),\r\n    )\r\n\r\n    const indexOfSuccessfulEstimation = safeGasEstimates.findIndex((safeGasEstimate) =>\r\n      BigNumber.isBigNumber(safeGasEstimate),\r\n    )\r\n\r\n    // all estimations failed...\r\n    if (indexOfSuccessfulEstimation === -1) {\r\n      console.error('This transaction would fail. Please contact support.')\r\n    } else {\r\n      const methodName = methodNames[indexOfSuccessfulEstimation]\r\n      const safeGasEstimate = safeGasEstimates[indexOfSuccessfulEstimation]\r\n\r\n      setAttemptingTxn(true)\r\n      await router[methodName](...args, {\r\n        gasLimit: safeGasEstimate,\r\n        gasPrice,\r\n      })\r\n        .then((response: TransactionResponse) => {\r\n          setAttemptingTxn(false)\r\n\r\n          addTransaction(response, {\r\n            summary: `Remove ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(3)} ${\r\n              currencyA?.symbol\r\n            } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(3)} ${currencyB?.symbol}`,\r\n          })\r\n\r\n          setTxHash(response.hash)\r\n        })\r\n        .catch((err: Error) => {\r\n          setAttemptingTxn(false)\r\n          // we only care if the error is something _other_ than the user rejected the tx\r\n          console.error(err)\r\n        })\r\n    }\r\n  }\r\n\r\n  function modalHeader() {\r\n    return (\r\n      <AutoColumn gap=\"md\">\r\n        <RowBetween align=\"flex-end\">\r\n          <Text fontSize=\"24px\">{parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)}</Text>\r\n          <RowFixed gap=\"4px\">\r\n            <CurrencyLogo currency={currencyA} size=\"24px\" />\r\n            <Text fontSize=\"24px\" ml=\"10px\">\r\n              {currencyA?.symbol}\r\n            </Text>\r\n          </RowFixed>\r\n        </RowBetween>\r\n        <RowFixed>\r\n          <AddIcon width=\"16px\" />\r\n        </RowFixed>\r\n        <RowBetween align=\"flex-end\">\r\n          <Text fontSize=\"24px\">{parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)}</Text>\r\n          <RowFixed gap=\"4px\">\r\n            <CurrencyLogo currency={currencyB} size=\"24px\" />\r\n            <Text fontSize=\"24px\" ml=\"10px\">\r\n              {currencyB?.symbol}\r\n            </Text>\r\n          </RowFixed>\r\n        </RowBetween>\r\n\r\n        <Text small textAlign=\"left\" pt=\"12px\">\r\n          {t('Output is estimated. If the price changes by more than %slippage%% your transaction will revert.', {\r\n            slippage: allowedSlippage / 100,\r\n          })}\r\n        </Text>\r\n      </AutoColumn>\r\n    )\r\n  }\r\n\r\n  function modalBottom() {\r\n    return (\r\n      <>\r\n        <RowBetween>\r\n          <Text>\r\n            {t('%assetA%/%assetB% Burned', { assetA: currencyA?.symbol ?? '', assetB: currencyB?.symbol ?? '' })}\r\n          </Text>\r\n          <RowFixed>\r\n            <DoubleCurrencyLogo currency0={currencyA} currency1={currencyB} margin />\r\n            <Text>{parsedAmounts[Field.LIQUIDITY]?.toSignificant(6)}</Text>\r\n          </RowFixed>\r\n        </RowBetween>\r\n        {pair && (\r\n          <>\r\n            <RowBetween>\r\n              <Text>{t('Price')}</Text>\r\n              <Text>\r\n                1 {currencyA?.symbol} = {tokenA ? pair.priceOf(tokenA).toSignificant(6) : '-'} {currencyB?.symbol}\r\n              </Text>\r\n            </RowBetween>\r\n            <RowBetween>\r\n              <div />\r\n              <Text>\r\n                1 {currencyB?.symbol} = {tokenB ? pair.priceOf(tokenB).toSignificant(6) : '-'} {currencyA?.symbol}\r\n              </Text>\r\n            </RowBetween>\r\n          </>\r\n        )}\r\n        <Button disabled={!(approval === ApprovalState.APPROVED || signatureData !== null)} onClick={onRemove}>\r\n          {t('Confirm')}\r\n        </Button>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const pendingText = t('Removing %amountA% %symbolA% and %amountB% %symbolB%', {\r\n    amountA: parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\r\n    symbolA: currencyA?.symbol ?? '',\r\n    amountB: parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\r\n    symbolB: currencyB?.symbol ?? '',\r\n  })\r\n\r\n  const liquidityPercentChangeCallback = useCallback(\r\n    (value: number) => {\r\n      onUserInput(Field.LIQUIDITY_PERCENT, value.toString())\r\n    },\r\n    [onUserInput],\r\n  )\r\n\r\n  const oneCurrencyIsETH = currencyA === ETHER || currencyB === ETHER\r\n  const oneCurrencyIsWETH = Boolean(\r\n    chainId &&\r\n      ((currencyA && currencyEquals(WETH[chainId], currencyA)) ||\r\n        (currencyB && currencyEquals(WETH[chainId], currencyB))),\r\n  )\r\n\r\n  const handleSelectCurrencyA = useCallback(\r\n    (currency: Currency) => {\r\n      if (currencyIdB && currencyId(currency) === currencyIdB) {\r\n        history.push(`/remove/${currencyId(currency)}/${currencyIdA}`)\r\n      } else {\r\n        history.push(`/remove/${currencyId(currency)}/${currencyIdB}`)\r\n      }\r\n    },\r\n    [currencyIdA, currencyIdB, history],\r\n  )\r\n  const handleSelectCurrencyB = useCallback(\r\n    (currency: Currency) => {\r\n      if (currencyIdA && currencyId(currency) === currencyIdA) {\r\n        history.push(`/remove/${currencyIdB}/${currencyId(currency)}`)\r\n      } else {\r\n        history.push(`/remove/${currencyIdA}/${currencyId(currency)}`)\r\n      }\r\n    },\r\n    [currencyIdA, currencyIdB, history],\r\n  )\r\n\r\n  const handleDismissConfirmation = useCallback(() => {\r\n    setSignatureData(null) // important that we clear signature data to avoid bad sigs\r\n    // if there was a tx hash, we want to clear the input\r\n    if (txHash) {\r\n      onUserInput(Field.LIQUIDITY_PERCENT, '0')\r\n    }\r\n    setTxHash('')\r\n  }, [onUserInput, txHash])\r\n\r\n  const [innerLiquidityPercentage, setInnerLiquidityPercentage] = useDebouncedChangeHandler(\r\n    Number.parseInt(parsedAmounts[Field.LIQUIDITY_PERCENT].toFixed(0)),\r\n    liquidityPercentChangeCallback,\r\n  )\r\n\r\n  const [onPresentRemoveLiquidity] = useModal(\r\n    <TransactionConfirmationModal\r\n      title={t('You will receive')}\r\n      customOnDismiss={handleDismissConfirmation}\r\n      attemptingTxn={attemptingTxn}\r\n      hash={txHash || ''}\r\n      content={() => <ConfirmationModalContent topContent={modalHeader} bottomContent={modalBottom} />}\r\n      pendingText={pendingText}\r\n    />,\r\n    true,\r\n    true,\r\n    'removeLiquidityModal',\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n      <AppBody>\r\n        <AppHeader\r\n          backTo=\"/pool\"\r\n          title={t('Remove %assetA%-%assetB% liquidity', {\r\n            assetA: currencyA?.symbol ?? '',\r\n            assetB: currencyB?.symbol ?? '',\r\n          })}\r\n          subtitle={`To receive ${currencyA?.symbol} and ${currencyB?.symbol}`}\r\n          noConfig\r\n        />\r\n\r\n        <CardBody>\r\n          <AutoColumn gap=\"20px\">\r\n            <RowBetween>\r\n              <Text>{t('Amount')}</Text>\r\n              <Button variant=\"text\" scale=\"sm\" onClick={() => setShowDetailed(!showDetailed)}>\r\n                {showDetailed ? t('Simple') : t('Detailed')}\r\n              </Button>\r\n            </RowBetween>\r\n            {!showDetailed && (\r\n              <BorderCard>\r\n                <Text fontSize=\"40px\" bold mb=\"16px\" style={{ lineHeight: 1 }}>\r\n                  {formattedAmounts[Field.LIQUIDITY_PERCENT]}%\r\n                </Text>\r\n                <Slider\r\n                  name=\"lp-amount\"\r\n                  min={0}\r\n                  max={100}\r\n                  value={innerLiquidityPercentage}\r\n                  onValueChanged={(value) => setInnerLiquidityPercentage(Math.ceil(value))}\r\n                  mb=\"16px\"\r\n                />\r\n                <Flex flexWrap=\"wrap\" justifyContent=\"space-evenly\">\r\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '25')}>\r\n                    25%\r\n                  </Button>\r\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '50')}>\r\n                    50%\r\n                  </Button>\r\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '75')}>\r\n                    75%\r\n                  </Button>\r\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}>\r\n                    Max\r\n                  </Button>\r\n                </Flex>\r\n              </BorderCard>\r\n            )}\r\n          </AutoColumn>\r\n          {!showDetailed && (\r\n            <>\r\n              <ColumnCenter>\r\n                <ArrowDownIcon color=\"textSubtle\" width=\"24px\" my=\"16px\" />\r\n              </ColumnCenter>\r\n              <AutoColumn gap=\"10px\">\r\n                <Text bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\r\n                  {t('You will receive')}\r\n                </Text>\r\n                <LightGreyCard>\r\n                  <Flex justifyContent=\"space-between\" mb=\"8px\">\r\n                    <Flex>\r\n                      <CurrencyLogo currency={currencyA} />\r\n                      <Text small color=\"textSubtle\" id=\"remove-liquidity-tokena-symbol\" ml=\"4px\">\r\n                        {currencyA?.symbol}\r\n                      </Text>\r\n                    </Flex>\r\n                    <Text small>{formattedAmounts[Field.CURRENCY_A] || '-'}</Text>\r\n                  </Flex>\r\n                  <Flex justifyContent=\"space-between\">\r\n                    <Flex>\r\n                      <CurrencyLogo currency={currencyB} />\r\n                      <Text small color=\"textSubtle\" id=\"remove-liquidity-tokenb-symbol\" ml=\"4px\">\r\n                        {currencyB?.symbol}\r\n                      </Text>\r\n                    </Flex>\r\n                    <Text small>{formattedAmounts[Field.CURRENCY_B] || '-'}</Text>\r\n                  </Flex>\r\n                  {chainId && (oneCurrencyIsWETH || oneCurrencyIsETH) ? (\r\n                    <RowBetween style={{ justifyContent: 'flex-end', fontSize: '14px' }}>\r\n                      {oneCurrencyIsETH ? (\r\n                        <StyledInternalLink\r\n                          to={`/remove/${currencyA === ETHER ? WETH[chainId].address : currencyIdA}/${\r\n                            currencyB === ETHER ? WETH[chainId].address : currencyIdB\r\n                          }`}\r\n                        >\r\n                          {t('Receive WBNB')}\r\n                        </StyledInternalLink>\r\n                      ) : oneCurrencyIsWETH ? (\r\n                        <StyledInternalLink\r\n                          to={`/remove/${currencyA && currencyEquals(currencyA, WETH[chainId]) ? 'BNB' : currencyIdA}/${\r\n                            currencyB && currencyEquals(currencyB, WETH[chainId]) ? 'BNB' : currencyIdB\r\n                          }`}\r\n                        >\r\n                          {t('Receive BNB')}\r\n                        </StyledInternalLink>\r\n                      ) : null}\r\n                    </RowBetween>\r\n                  ) : null}\r\n                </LightGreyCard>\r\n              </AutoColumn>\r\n            </>\r\n          )}\r\n\r\n          {showDetailed && (\r\n            <Box my=\"16px\">\r\n              <CurrencyInputPanel\r\n                value={formattedAmounts[Field.LIQUIDITY]}\r\n                onUserInput={onLiquidityInput}\r\n                onMax={() => {\r\n                  onUserInput(Field.LIQUIDITY_PERCENT, '100')\r\n                }}\r\n                showMaxButton={!atMaxAmount}\r\n                disableCurrencySelect\r\n                currency={pair?.liquidityToken}\r\n                pair={pair}\r\n                id=\"liquidity-amount\"\r\n                onCurrencySelect={() => null}\r\n              />\r\n              <ColumnCenter>\r\n                <ArrowDownIcon width=\"24px\" my=\"16px\" />\r\n              </ColumnCenter>\r\n              <CurrencyInputPanel\r\n                hideBalance\r\n                value={formattedAmounts[Field.CURRENCY_A]}\r\n                onUserInput={onCurrencyAInput}\r\n                onMax={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}\r\n                showMaxButton={!atMaxAmount}\r\n                currency={currencyA}\r\n                label={t('Output')}\r\n                onCurrencySelect={handleSelectCurrencyA}\r\n                id=\"remove-liquidity-tokena\"\r\n              />\r\n              <ColumnCenter>\r\n                <AddIcon width=\"24px\" my=\"16px\" />\r\n              </ColumnCenter>\r\n              <CurrencyInputPanel\r\n                hideBalance\r\n                value={formattedAmounts[Field.CURRENCY_B]}\r\n                onUserInput={onCurrencyBInput}\r\n                onMax={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}\r\n                showMaxButton={!atMaxAmount}\r\n                currency={currencyB}\r\n                label={t('Output')}\r\n                onCurrencySelect={handleSelectCurrencyB}\r\n                id=\"remove-liquidity-tokenb\"\r\n              />\r\n            </Box>\r\n          )}\r\n          {pair && (\r\n            <AutoColumn gap=\"10px\" style={{ marginTop: '16px' }}>\r\n              <Text bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\r\n                {t('Prices')}\r\n              </Text>\r\n              <LightGreyCard>\r\n                <Flex justifyContent=\"space-between\">\r\n                  <Text small color=\"textSubtle\">\r\n                    1 {currencyA?.symbol} =\r\n                  </Text>\r\n                  <Text small>\r\n                    {tokenA ? pair.priceOf(tokenA).toSignificant(6) : '-'} {currencyB?.symbol}\r\n                  </Text>\r\n                </Flex>\r\n                <Flex justifyContent=\"space-between\">\r\n                  <Text small color=\"textSubtle\">\r\n                    1 {currencyB?.symbol} =\r\n                  </Text>\r\n                  <Text small>\r\n                    {tokenB ? pair.priceOf(tokenB).toSignificant(6) : '-'} {currencyA?.symbol}\r\n                  </Text>\r\n                </Flex>\r\n              </LightGreyCard>\r\n            </AutoColumn>\r\n          )}\r\n          <Box position=\"relative\" mt=\"16px\">\r\n            {!account ? (\r\n              <ConnectWalletButton />\r\n            ) : (\r\n              <RowBetween>\r\n                <Button\r\n                  variant={approval === ApprovalState.APPROVED || signatureData !== null ? 'success' : 'primary'}\r\n                  onClick={onAttemptToApprove}\r\n                  disabled={approval !== ApprovalState.NOT_APPROVED || signatureData !== null}\r\n                  width=\"100%\"\r\n                  mr=\"0.5rem\"\r\n                >\r\n                  {approval === ApprovalState.PENDING ? (\r\n                    <Dots>{t('Enabling')}</Dots>\r\n                  ) : approval === ApprovalState.APPROVED || signatureData !== null ? (\r\n                    t('Enabled')\r\n                  ) : (\r\n                    t('Enable')\r\n                  )}\r\n                </Button>\r\n                <Button\r\n                  variant={\r\n                    !isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]\r\n                      ? 'danger'\r\n                      : 'primary'\r\n                  }\r\n                  onClick={() => {\r\n                    onPresentRemoveLiquidity()\r\n                  }}\r\n                  width=\"100%\"\r\n                  disabled={!isValid || (signatureData === null && approval !== ApprovalState.APPROVED)}\r\n                >\r\n                  {error || t('Remove')}\r\n                </Button>\r\n              </RowBetween>\r\n            )}\r\n          </Box>\r\n        </CardBody>\r\n      </AppBody>\r\n\r\n      {pair ? (\r\n        <AutoColumn style={{ minWidth: '20rem', width: '100%', maxWidth: '400px', marginTop: '1rem' }}>\r\n          <MinimalPositionCard showUnwrapped={oneCurrencyIsWETH} pair={pair} />\r\n        </AutoColumn>\r\n      ) : null}\r\n    </Page>\r\n  )\r\n}\r\n","import { useCallback, useEffect, useRef, useState } from 'react'\r\n\r\n/**\r\n * Easy way to debounce the handling of a rapidly changing value, e.g. a changing slider input\r\n * @param value value that is rapidly changing\r\n * @param onChange change handler that should receive the debounced updates to the value\r\n * @param debouncedMs how long we should wait for changes to be applied\r\n */\r\nexport default function useDebouncedChangeHandler<T>(\r\n  value: T,\r\n  onChange: (newValue: T) => void,\r\n  debouncedMs = 100,\r\n): [T, (value: T) => void] {\r\n  const [inner, setInner] = useState<T>(() => value)\r\n  const timer = useRef<ReturnType<typeof setTimeout>>()\r\n\r\n  const onChangeInner = useCallback(\r\n    (newValue: T) => {\r\n      setInner(newValue)\r\n      if (timer.current) {\r\n        clearTimeout(timer.current)\r\n      }\r\n      timer.current = setTimeout(() => {\r\n        onChange(newValue)\r\n        timer.current = undefined\r\n      }, debouncedMs)\r\n    },\r\n    [debouncedMs, onChange],\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (timer.current) {\r\n      clearTimeout(timer.current)\r\n      timer.current = undefined\r\n    }\r\n    setInner(value)\r\n  }, [value])\r\n\r\n  return [inner, onChangeInner]\r\n}\r\n","import { Link } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\n\r\n// An internal link from the react-router-dom library that is correctly styled\r\nconst StyledInternalLink = styled(Link)`\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  font-weight: 500;\r\n\r\n  :hover {\r\n    text-decoration: underline;\r\n  }\r\n\r\n  :focus {\r\n    outline: none;\r\n    text-decoration: underline;\r\n  }\r\n\r\n  :active {\r\n    text-decoration: none;\r\n  }\r\n`\r\n\r\nexport default StyledInternalLink\r\n"],"sourceRoot":""}